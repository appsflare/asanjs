{"name":"CustomElements","description":"Implements `document.register`","classes":[{"name":"Document","file":"D:\\_Workarea\\Projects\\AgilePoint\\TFS\\Main\\Src\\NXCore\\NX Portal\\modules\\AsanJs\\src\\lib\\x-tag.js","line":3152,"description":"Polyfilled extensions to the `document` object.","methods":[{"line":1075,"description":"Registers a custom tag name with the document.\n\nWhen a registered element is created, a `readyCallback` method is called\nin the scope of the element. The `readyCallback` method can be specified on\neither `options.prototype` or `options.lifecycle` with the latter taking\nprecedence.","name":"register","params":[{"name":"name","description":"The tag name to register. Must include a dash ('-'),\n   for example 'x-component'.","type":"String"},{"name":"options","description":"","type":"Object","props":[{"name":"extends","description":"(_off spec_) Tag name of an element to extend (or blank for a new\n     element). This parameter is not part of the specification, but instead\n     is a hint for the polyfill because the extendee is difficult to infer.\n     Remember that the input prototype must chain to the extended element's\n     prototype (or HTMLElement.prototype) regardless of the value of\n     `extends`.","type":"String","optional":true},{"name":"prototype","description":"The prototype to use for the new\n     element. The prototype must inherit from HTMLElement.","type":"Object"},{"name":"lifecycle","description":"Callbacks that fire at important phases in the life of the custom\n     element.","type":"Object","optional":true}]}],"example":["\n     FancyButton = document.registerElement(\"fancy-button\", {\n       extends: 'button',\n       prototype: Object.create(HTMLButtonElement.prototype, {\n         readyCallback: {\n           value: function() {\n             console.log(\"a fancy-button was created\",\n           }\n         }\n       })\n     });"],"return":{"description":"Constructor for the newly registered type.","type":"Function"}},{"line":1445,"description":"Upgrade an element to a custom element. Upgrading an element\ncauses the custom prototype to be applied, an `is` attribute\nto be attached (as needed), and invocation of the `readyCallback`.\n`upgrade` does nothing if the element is already upgraded, or\nif it matches no registered custom tag name.","name":"ugprade","params":[{"name":"element","description":"The element to upgrade.","type":"Element"}],"return":{"description":"The upgraded element.","type":"Element"}},{"line":3194,"description":"Registers a custom tag name with the document.\n\nWhen a registered element is created, a `readyCallback` method is called\nin the scope of the element. The `readyCallback` method can be specified on\neither `options.prototype` or `options.lifecycle` with the latter taking\nprecedence.","name":"register","params":[{"name":"name","description":"The tag name to register. Must include a dash ('-'),\n   for example 'x-component'.","type":"String"},{"name":"options","description":"","type":"Object","props":[{"name":"extends","description":"(_off spec_) Tag name of an element to extend (or blank for a new\n     element). This parameter is not part of the specification, but instead\n     is a hint for the polyfill because the extendee is difficult to infer.\n     Remember that the input prototype must chain to the extended element's\n     prototype (or HTMLElement.prototype) regardless of the value of\n     `extends`.","type":"String","optional":true},{"name":"prototype","description":"The prototype to use for the new\n     element. The prototype must inherit from HTMLElement.","type":"Object"},{"name":"lifecycle","description":"Callbacks that fire at important phases in the life of the custom\n     element.","type":"Object","optional":true}]}],"example":["\n     FancyButton = document.registerElement(\"fancy-button\", {\n       extends: 'button',\n       prototype: Object.create(HTMLButtonElement.prototype, {\n         readyCallback: {\n           value: function() {\n             console.log(\"a fancy-button was created\",\n           }\n         }\n       })\n     });"],"return":{"description":"Constructor for the newly registered type.","type":"Function"}},{"line":3567,"description":"Upgrade an element to a custom element. Upgrading an element\ncauses the custom prototype to be applied, an `is` attribute\nto be attached (as needed), and invocation of the `readyCallback`.\n`upgrade` does nothing if the element is already upgraded, or\nif it matches no registered custom tag name.","name":"ugprade","params":[{"name":"element","description":"The element to upgrade.","type":"Element"}],"return":{"description":"The upgraded element.","type":"Element"}}],"properties":[],"events":[]}],"methods":[],"properties":[],"events":[]}
